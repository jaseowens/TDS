<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Vars
//Store
money = 0;

//Health
hp = 100;

//Multiplies speed to move faster, is changed if going diagnal
spdMul = 4;

//Used to slow rate of fire
canFireCount = 0;

//Create Weapon:
instance_create(x,y,oWeapon);

//Weapons:
curWeapon = 0;

//Create Camera:
instance_create(x,y,oCamera);

//Create GUI:
instance_create(x,y,oGUI);

//Create Mouse:
instance_create(x,y,oMouse);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls

var xDir, yDir;
xDir = keyboard_check(ord('D')) - keyboard_check(ord('A'));
yDir =  keyboard_check(ord('S')) - keyboard_check(ord('W'));

if(keyboard_check(ord('D')) &amp;&amp; keyboard_check(ord('W')) || keyboard_check(ord('D')) &amp;&amp; keyboard_check(ord('S'))){
    spdMul = 3;
} else if(keyboard_check(ord('A')) &amp;&amp; keyboard_check(ord('W')) || keyboard_check(ord('A')) &amp;&amp; keyboard_check(ord('S'))){
    spdMul = 3;
} else{
    spdMul = 4;
}

hspeed = xDir*spdMul;
vspeed = yDir*spdMul;

//Collisions:
if(hspeed !=0){
    if(!place_free(x+hspeed,y)){
        if(hspeed &gt; 0){
            move_contact_solid(0,hspeed);
        }
        if(hspeed&lt;0){
            move_contact_solid(180,-hspeed);
        }
        hspeed = 0;
    }
}

if(vspeed !=0){
    if(!place_free(x,y+vspeed)){
        if(vspeed &gt; 0){
            move_contact_solid(270,vspeed);
        }
        if(vspeed&lt;0){
            move_contact_solid(90,-vspeed);
        }
        vspeed = 0;
    }
}

//Look at Mouse
image_angle = point_direction(x,y,mouse_x,mouse_y);

//Fire Bullet
if(canFireCount &lt; getWeaponFireSpeed(curWeapon)){
    canFireCount++;
}
if(mouse_check_button(mb_left)){
    if(canFireCount = getWeaponFireSpeed(curWeapon)){
        if(curWeapon = 4){
            instance_create(oWeapon.x,oWeapon.y,oAcidBullet);
            canFireCount = 0;
        } else if(curWeapon = 5){
            instance_create(oWeapon.x,oWeapon.y,oRocketBullet);
            canFireCount = 0;
        } else{
            instance_create(oWeapon.x,oWeapon.y,oBullet);
            if(curWeapon = 2){
                instance_create(x,y,oBullet);
                instance_create(x,y,oBullet);
                instance_create(x,y,oBullet);
                instance_create(x,y,oBullet);
            }
            canFireCount = 0;
        }
    }   
}

/**
//Fire Bullet [OLD]
if(canFireCount &lt; getWeaponFireSpeed(curWeapon)){
    canFireCount++;
}
if(mouse_check_button(mb_left)){
    if(canFireCount = getWeaponFireSpeed(curWeapon)){
        if(curWeapon = "Acid Gun"){
            instance_create(oWeapon.x,oWeapon.y,oAcidBullet);
            canFireCount = 0;
        } else{
            instance_create(oWeapon.x,oWeapon.y,oBullet);
            if(curWeapon = "Shotgun"){
                instance_create(x,y,oBullet);
                instance_create(x,y,oBullet);
                instance_create(x,y,oBullet);
                instance_create(x,y,oBullet);
            }
            canFireCount = 0;
        }
    }
}
**/
//Death
if(hp &lt;= 0){
    //Player Dies  
}

//Pause:
if(keyboard_check_released(vk_escape)){
    instance_create(x,y,oPause);
    canPause = 0;
}
//FOR TESTING
if(mouse_wheel_down()){
    //ESSENTIAL FOR SWAPPING, MAJOR BUGS IF DONT DO BELOW
    canFireCount = 0;
    if(curWeapon &gt;= 1){
        curWeapon -= 1;
    } else{
        curWeapon = 5;
    }
}
if(mouse_wheel_up()){
    //ESSENTIAL FOR SWAPPING, MAJOR BUGS IF DONT DO BELOW
    canFireCount = 0;
    if(curWeapon &lt;= 4){
        curWeapon += 1;
    } else{
        curWeapon = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
